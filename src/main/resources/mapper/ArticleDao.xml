<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.dao.ArticleDao">

    <insert id="writeArticle">
        INSERT INTO article
        SET regDate = now(),
            updateDate = now(),
            title = #{title}, body = #{body}, memberId = #{memberId}, boardId = #{boardId}
    </insert>

    <update id="increaseVCnt">
        update article
        set views = views + 1
        where id = #{id}
    </update>

    <select id="getArticleCountByBoard" resultType="int">
        select count(*)
        from article
        where boardId = #{boardId}
        <if test="searchKeyword != ''">
            <choose>
                <when test="selectKey == 'title'">
                    and title LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="selectKey == 'body'">
                    and body LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <otherwise>
                    and (
                    body LIKE CONCAT('%', #{searchKeyword}, '%')
                    or
                    body LIKE CONCAT('%', #{searchKeyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
    </select>

    <select id="getLastInsertId" resultType="int">
        SELECT LAST_INSERT_ID()
    </select>

    <select id="getArticleById" resultType="Article">
        select *
        from article
        where id = #{id}
    </select>

    <select id="getArticleByNickname" resultType="Article">
        select a.*, m.nickname as writerName
        from article as a
                 inner join `member` as m
                            on a.memberId = m.id
        where a.id = #{id};
    </select>

    <select id="getArticleReactionPoint" resultType="Article">
        select a.*, p.relId as relId, p.point as point
        from article as a
                 inner join reactionPoint as p
                            on a.id = p.relId
        where a.id = #{id};
    </select>

<!--    with am as (-->
<!--    select a.*, m.nickName as writerName-->
<!--    from article as a-->
<!--    inner join member as m-->
<!--    on a.memberId = m.id-->
<!--    #         where a.boardId = 2-->
<!--    )-->
<!--    select am.*,-->
<!--    ifnull(sum(RP.point), 0) as sumReactionPoint,-->
<!--    sum(if(RP.point > 0, RP.point, 0)) as goodReactionPoint,-->
<!--    sum(if(RP.point < 0, RP.point, 0)) as badReactionPoint-->
<!--    from am-->
<!--    left join reactionPoint as RP-->
<!--    on RP.relTypeCode = 'article'-->
<!--    and am.id = RP.relId-->
<!--    group by am.id-->
<!--    order by am.id desc-->


    <select id="getAllArticles" resultType="Article">
        with am as (
        select a.*, m.nickName as writerName
        from article as a
        inner join member as m
        on a.memberId = m.id
        where a.boardId = #{boardId}
        <if test="searchKeyword != ''">
            <choose>
                <when test="selectKey == 'title'">
                    and a.title LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="selectKey == 'body'">
                    and a.body LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <otherwise>
                    and (
                    a.body LIKE CONCAT('%', #{searchKeyword}, '%')
                    or
                    a.body LIKE CONCAT('%', #{searchKeyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
        )
        select am.*,
            ifnull(sum(RP.point), 0) as sumReactionPoint,
            sum(if(RP.point &gt; 0, RP.point, 0)) as goodReactionPoint,
            sum(if(RP.point &lt; 0, RP.point, 0)) as badReactionPoint
        from am
        left join reactionPoint as RP
        on RP.relTypeCode = 'article'
        and am.id = RP.relId
        group by am.id
        order by am.id desc
        limit #{limitFrom}, #{itemsInPage};
    </select>

    <delete id="deleteArticle">
        DELETE
        FROM article
        WHERE id = #{id}
    </delete>

    <update id="modifyArticle">
        UPDATE article
        <set>
            updateDate = now(),
            <if test="title != null and title != ''">
                title = #{title},
            </if>
            <if test="body != null and body != ''">
                body = #{body}
            </if>
        </set>
        WHERE id = #{id}
    </update>

</mapper>

